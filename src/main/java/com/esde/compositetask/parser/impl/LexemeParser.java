package com.esde.compositetask.parser.impl;

import com.esde.compositetask.component.*;
import com.esde.compositetask.interpreter.ExpressionParser;
import com.esde.compositetask.parser.AbstractParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LexemeParser extends AbstractParser {
    private static final Logger logger = LogManager.getLogger(LexemeParser.class);
    private static final Pattern LEXEME_PATTERN = Pattern.compile("\\S+");

    @Override
    public TextElement parse(String text) {
        logger.info("‚ñ∂ –ü–∞—Ä—Å–∏–Ω–≥ –ª–µ–∫—Å–µ–º. –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: '{}'", text);

        // üî¢ –í–´–ß–ò–°–õ–Ø–ï–ú –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –î–û —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ª–µ–∫—Å–µ–º—ã
        text = ExpressionParser.parseAndEvaluate(text);
        logger.info("‚úÖ –ü–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏: '{}'", text);

        TextComposite composite = new TextComposite(ElementType.LEXEME);
        Matcher matcher = LEXEME_PATTERN.matcher(text);

        while (matcher.find()) {
            String lexeme = matcher.group();
            TextElement lexemeElement;

            if (next != null) {
                lexemeElement = next.parse(lexeme);
            } else {
                lexemeElement = new TextSymbol(lexeme, ElementType.LEXEME);
            }

            composite.add(lexemeElement);
        }

        logger.info("‚úÖ –õ–µ–∫—Å–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {}", composite.getChild().size());
        return composite;
    }
}
